/**
	Manages the whole game
	You can create a new gamemode by creating a subclass to this one.
	@author Benjamin Ferenc Hajas
*/

#include "GameLogic.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <iostream> // DEBUG

GameLogic::GameLogic()
{
<<<<<<< HEAD
	srand(time(NULL));
	playerPosition = Position(PLAYER_HORIZONTAL_POSITION, PLAYER_VERTICAL_POSITION);
	target = 0;
	vocabulary = new Vocabulary("Words/en");
=======
    srand(time(NULL));
    this->resolution = resolution;
    PLAYER_VERTICAL_POSITION = resolution.getY() - 30;
    playerPosition = Position((resolution.getX() / 2), PLAYER_VERTICAL_POSITION);
    target = 0;
    vocabulary = new Vocabulary("en");
>>>>>>> 80d6d1af08009fbcb1e16b1559eed44e0ef1623c
}



void GameLogic::newGame()
{
    gameOver = false;
    score = 0;
    waveCount = 0;
    nextWave();
}

//Updates all enemies
void GameLogic::update(float deltaTime)
{
<<<<<<< HEAD
	if (remainingEnemyCount != 0)
	for (std::vector<Enemy>::iterator iterator = enemies.begin(), end = enemies.end(); iterator != end; ++iterator)
	{
		if (!iterator->isDead()){
		iterator->update(deltaTime);
		if (iterator->getPosition().distance(playerPosition) < 1) gameOver = true;
		}
		}
	else waveOver = true;
=======
    for (int i = 0; i < missles.size(); i++)
    {
        if(missles[i].updateWithHitTest(deltaTime))
        {
            if(target != 0){
                // TODO: lehet a missle targetje alapján kellene nézni
                //Did we hit the target?
                if (target->getText()[shotIndex] == missles[i].c)
                {	//Is it dead?
                    if (shotIndex+1 == (int)(target->getText().length()))
                    {
                        shotIndex = 0;
                        target->kill();
                        score += target->getDifficulty() * KILL_SCORE;
                        target = 0;
                        remainingEnemyCount--;
                    }
                    shotIndex++;
                    return true;
                }
                std::cout << "HIT";
            }
            missles.erase(missles.begin()+i);
        }
    }
    if (remainingEnemyCount != 0)
        for (std::vector<Enemy>::iterator iterator = enemies.begin(), end = enemies.end(); iterator != end; ++iterator)
        {
            if (!iterator->isDead()){
                iterator->update(deltaTime);
                if (iterator->getPosition().distance(playerPosition) < 5) gameOver = true;
            }
        }
    else waveOver = true;
>>>>>>> 80d6d1af08009fbcb1e16b1559eed44e0ef1623c
}

//Looks for a target
bool GameLogic::aim(char c)
{
<<<<<<< HEAD
	for (std::vector<Enemy>::iterator iterator = enemies.begin(), end = enemies.end(); iterator != end; ++iterator)
	{
		//e.g: input:'c'  Enemy text: "clever"
		if (iterator->getText()[0] == c && !iterator->isDead() && iterator->onScreen())
		{
			target = &(*iterator); 
			shootAt(c);
			return true;
		}
	}
	return false;
=======
    for (std::vector<Enemy>::iterator iterator = enemies.begin(), end = enemies.end(); iterator != end; ++iterator)
    {
        //e.g: input:'c'  Enemy text: "clever"
        if (iterator->getText()[0] == c && !iterator->isDead())
        {
            target = &(*iterator);
            shootAt(c);
            return true;
        }
    }
    return false;
>>>>>>> 80d6d1af08009fbcb1e16b1559eed44e0ef1623c
}

//Tries to shoot something
bool GameLogic::shoot(char c)
{
    //Do we have a target?
    if (target == 0){
        //Look for a target
        return aim(c);
    }
    else{
        //Try to shoot at target
        return shootAt(c);
    }
}

//Tries to shoot at a given enemy
bool GameLogic::shootAt(char c){
<<<<<<< HEAD
	//Did we hit the target?
	if (target->getText()[shotIndex] == c)
	{	//Is it dead?
		if (shotIndex+1 == (int)(target->getText().length()))
		{	
			shotIndex = 0;
			target->kill();
			score += KILL_SCORE;
			target = 0;
			remainingEnemyCount--;
		}
		shotIndex++;
		return true;
	}
	return false;
=======
    missles.push_back(Missle(Position(playerPosition.getX(),playerPosition.getY()),target,c));
    return false;
>>>>>>> 80d6d1af08009fbcb1e16b1559eed44e0ef1623c
}

//Spawns enemies
void GameLogic::createEnemies()
{
<<<<<<< HEAD
	enemies.clear();
	enemyCount = BASE_ENEMY_COUNT + (waveCount - 1)  * BONUS_ENEMY_PER_WAVE;
	for (int i = 0; i < enemyCount; ++i)
	{
		std::string text = vocabulary->getRandomWord();
		std::cout << text << std::endl;
		Position p(rand() % 100,-1* rand() % (SPAWN_RANGE));
		enemies.push_back(Enemy(text, p, playerPosition, 10));
		remainingEnemyCount++;
	}
=======
    enemies.clear();
    enemyCount = BASE_ENEMY_COUNT + (waveCount - 1)  * BONUS_ENEMY_PER_WAVE;
    for (int i = 0; i < enemyCount; ++i)
    {
        std::string text = vocabulary->getRandomWord();
        std::cout << text << std::endl;
        Position p(rand() % ((int)resolution.getX()+1),-1* rand() % (SPAWN_RANGE));
        enemies.push_back(Enemy(text, p, playerPosition, 30));
        remainingEnemyCount++;
    }
>>>>>>> 80d6d1af08009fbcb1e16b1559eed44e0ef1623c
}

void GameLogic::nextWave()
{
    waveOver = false;
    waveCount++;
    createEnemies();
}
